// grid-strategy.js
class GridStrategy {
    constructor(orderManager, cacheManager, config) {
      this.orderManager = orderManager;
      this.cacheManager = cacheManager;
      this.config = config;
      this.running = false;
      this.updateInterval = null;
      this.statsInterval = null;
      this.lastPriceWarningTime = null;
      this.lastProcessedPrice = null;
      this.lastUpdateTime = null;
      this.lastBasePrice = null;
      this.isPlacingOrders = false;
    }
    
    start() {
      if (this.running) return;
      
      this.running = true;
      console.log(`üöÄ D√©marrage de la strat√©gie de grid trading (${this.config.maxOrders} ordres max, palier de ${this.config.priceStep}$)`);
      
      // Initialiser les ordres au d√©marrage
      this.placeInitialOrders();
      
      // R√©cup√©rer l'intervalle de mise √† jour depuis la configuration ou utiliser la valeur par d√©faut
      const updateInterval = this.config.strategy?.updateInterval || 250;
      
      // Mettre √† jour les ordres plus fr√©quemment pour une meilleure r√©activit√©
      this.updateInterval = setInterval(() => this.updateOrders(), updateInterval);
      console.log(`‚è±Ô∏è Intervalle de mise √† jour des ordres: ${updateInterval}ms pour une meilleure r√©activit√©`);
      
      // Afficher les statistiques p√©riodiquement (toutes les 5 minutes)
      this.statsInterval = setInterval(() => {
        this.cacheManager.logCacheStatus();
        this.orderManager.logStats();
        
        // Ajouter un diagnostic complet p√©riodique
        console.log(`\nüìä DEBUG: Diagnostic p√©riodique du cache (toutes les 5 minutes)`);
        this.cacheManager.diagnoseCacheState();
      }, 5 * 60 * 1000);
    }
    
    stop() {
      if (!this.running) return;
      
      this.running = false;
      
      if (this.updateInterval) {
        clearInterval(this.updateInterval);
        this.updateInterval = null;
      }
      
      if (this.statsInterval) {
        clearInterval(this.statsInterval);
        this.statsInterval = null;
      }
      
      console.log('‚èπÔ∏è Arr√™t de la strat√©gie de grid trading');
    }
    
    placeInitialOrders() {
      const currentPrice = this.cacheManager.getLastPrice();
      if (!currentPrice) {
        console.log("‚ö†Ô∏è Prix actuel non disponible, impossible de placer les ordres initiaux");
        return;
      }
      
      console.log(`üìù Placement des ordres initiaux (prix actuel: ${currentPrice}$)`);
      this.updateGridOrders(currentPrice);
    }
    
    updateOrders() {
      const currentPrice = this.cacheManager.getLastPrice();
      if (!currentPrice) {
        // √âviter de spammer les logs lors de la mise √† jour fr√©quente
        if (!this.lastPriceWarningTime || Date.now() - this.lastPriceWarningTime > 10000) {
          console.log("‚ö†Ô∏è Prix actuel non disponible, mise √† jour des ordres report√©e");
          this.lastPriceWarningTime = Date.now();
        }
        return;
      }
      
      // Stocker le dernier prix trait√© pour √©viter les mises √† jour inutiles
      if (this.lastProcessedPrice === currentPrice && this.lastUpdateTime && 
          Date.now() - this.lastUpdateTime < 1000) {
        // Prix identique et mise √† jour r√©cente, pas besoin de recalculer
        return;
      }
      
      // Mettre √† jour la grille avec le nouveau prix
      this.updateGridOrders(currentPrice);
      
      // Enregistrer le prix trait√© et l'heure
      this.lastProcessedPrice = currentPrice;
      this.lastUpdateTime = Date.now();
    }
    
    updateGridOrders(currentPrice) {
      // Nettoyer les ordres pending trop anciens
      this.cacheManager.cleanPendingOrders(1500); // 1,5 secondes
      
      // Calculer le prix de base (arrondi au palier inf√©rieur)
      const basePrice = Math.floor(currentPrice / this.config.priceStep) * this.config.priceStep;
      
      // V√©rifier si le prix de base a chang√© depuis la derni√®re mise √† jour
      const priceHasChanged = this.lastBasePrice !== basePrice;
      
      // Mettre √† jour le dernier prix de base
      this.lastBasePrice = basePrice;
      
      // Log uniquement si le prix de base a chang√©
      if (priceHasChanged) {
        console.log(`üìä Mise √† jour de la grille - Prix actuel: ${currentPrice}$, Prix de base: ${basePrice}$`);
      }
      
      // G√©n√©rer les paliers d√©sir√©s - MODIFI√â: commencer √† i = 0 pour inclure le palier le plus proche
      const desiredLevels = [];
      console.log(`üîç DEBUG updateGridOrders: G√©n√©ration des niveaux de prix d√©sir√©s (max: ${this.config.maxOrders})`);
      
      for (let i = 0; i <= this.config.maxOrders - 1; i++) {
        const priceLevel = basePrice - i * this.config.priceStep;
        desiredLevels.push(priceLevel);
        console.log(`   Niveau #${i+1}: ${priceLevel}$`);
      }
      
      // 1. Supprimer les ordres en trop ou trop √©loign√©s (en masse)
      const removedCount = this.orderManager.enforceMaxOrders();
      if (removedCount > 0) {
        console.log(`üßπ ${removedCount} ordres √©loign√©s ont √©t√© annul√©s`);
      }
      
      // 2. Filtrer pour ne garder que les nouveaux prix o√π on peut placer des ordres
      const newPriceLevels = [];
      // Log simplifi√© pour √©viter les d√©tails verbeux
      
      for (const price of desiredLevels) {
        const canPlace = this.cacheManager.canPlaceOrder(price, this.config.priceStep);
        // Suppression du log de d√©tail pour chaque prix v√©rifi√©
        if (canPlace) {
          newPriceLevels.push(price);
        }
      }
      
      // 3. Placer les nouveaux ordres d'achat en vagues optimis√©es
      if (newPriceLevels.length > 0) {
        console.log(`‚ú® ${newPriceLevels.length} nouveaux ordres d'achat √† placer: ${JSON.stringify(newPriceLevels)}`);
        
        if (!this.isPlacingOrders) {
          this.isPlacingOrders = true;
          console.log(`üîÑ DEBUG updateGridOrders: Flag isPlacingOrders activ√©`);
          
          // Ajouter un timeout pour lib√©rer le flag apr√®s un d√©lai maximum
          const placementTimeout = setTimeout(() => {
            if (this.isPlacingOrders) {
              console.log("‚ö†Ô∏è Timeout du placement d'ordres - lib√©ration forc√©e du flag");
              this.isPlacingOrders = false;
            }
          }, 2000); // 2 secondes
          
          this.orderManager.placeOrdersInWaves('buy', newPriceLevels)
            .then(placedCount => {
              clearTimeout(placementTimeout);
              this.isPlacingOrders = false;
              console.log(`‚úÖ ${placedCount} nouveaux ordres d'achat plac√©s avec succ√®s`);
              console.log(`üîÑ DEBUG updateGridOrders: Flag isPlacingOrders d√©sactiv√© apr√®s placement r√©ussi`);
            })
            .catch(error => {
              clearTimeout(placementTimeout);
              this.isPlacingOrders = false;
              console.error(`‚ùå Erreur lors du placement des ordres: ${error.message}`);
            });
        } else {
          console.log(`‚è≥ Placement d'ordres d√©j√† en cours - ${newPriceLevels.length} nouveaux ordres ignor√©s pour √©viter les erreurs 429`);
        }
      } else if (priceHasChanged) {
        // Afficher ce message uniquement si le prix a chang√© et qu'il n'y a pas de nouveaux ordres
        console.log(`‚ÑπÔ∏è Aucun nouvel ordre d'achat √† placer`);
      }
      
      // Afficher un r√©sum√© uniquement si des actions ont √©t√© entreprises ou si le prix a chang√©
      if (priceHasChanged || removedCount > 0 || newPriceLevels.length > 0) {
        console.log(`üìà R√©sum√© de la mise √† jour:
          - Prix actuel: ${currentPrice}$
          - Ordres d'achat actifs: ${this.cacheManager.buyCurrentOrders.size}
          - Ordres de vente actifs: ${this.cacheManager.sellCurrentOrders.size}
          - Ordres en attente de vente: ${this.cacheManager.buyFilledOrders.size}
          - Ordres annul√©s: ${removedCount}
          - Nouveaux ordres: ${newPriceLevels.length}
        `);
        
        // Lancer un diagnostic complet apr√®s la mise √† jour
        console.log(`\nüìä DEBUG updateGridOrders: Diagnostic de l'√©tat du cache apr√®s mise √† jour de la grille`);
        this.cacheManager.diagnoseCacheState();
      }
    }
  }
  
  module.exports = GridStrategy;